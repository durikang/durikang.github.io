{"version":3,"sources":["components/Common/Alert.jsx","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-transition-group/esm/CSSTransition.js","../node_modules/dom-helpers/esm/addClass.js","components/Detail/Tab/TabContent.jsx","components/Detail/InfoStock.jsx","components/Detail/Detail.jsx"],"names":["connect","state","alertOpen","reducer2","props","className","information","type","onClick","dispatch","replaceClassName","origClass","classToRemove","replace","RegExp","_addClass","node","classes","split","forEach","c","element","classList","add","hasClass","setAttribute","baseVal","removeClass","remove","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","onEntering","_this$resolveArgument2","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_inheritsLoose","_proto","prototype","phase","scrollTop","_this$appliedClasses$","base","active","done","render","_this$props","_objectWithoutPropertiesLoose","React","createElement","Transition","_extends","Component","defaultProps","propTypes","TabContent","useEffect","setSwitchBtn","tab","InfoStock","stockCount","useContext","stockContext","findProduct","id","reducer","addItem","reducer3","useState","alert","setAlert","history","useHistory","useParams","setTab","switchBtn","alertTimer","setTimeout","clearTimeout","data","find","prod","toString","pushTabBtn","e","link","target","dataset","rbEventKey","title","Alert","src","width","alt","content","price","stock","payload","name","quan","push","Button","variant","goBack","Nav","defaultActiveKey","Item","Link","eventKey","in","timeout"],"mappings":"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","file":"static/js/3.f3e82abf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Alert(props){\r\n    \r\n    let closeBtn = (()=>{\r\n        if(props.alertOpen === true){\r\n            props.dispatch({type:false});\r\n        }\r\n    })\r\n\r\n    return(\r\n        <div className=\"my-alert my-alert-white-yellow\">\r\n            <p>{props.information}</p>\r\n            {props.type === 'type2' ? (<button onClick={closeBtn}>닫기</button>) : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction storeFuc(state){\r\n    return {\r\n        alertOpen : state.reducer2\r\n    }\r\n}\r\n\r\nexport default connect(storeFuc)(Alert)\r\n","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    ;\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","import React, { useEffect } from 'react';\r\n\r\nfunction TabContent(props){\r\n    useEffect(()=>{\r\n        props.setSwitchBtn(true);\r\n    });\r\n    if(props.tab === 0){\r\n        return (<div>0번째 입니다.</div>);\r\n    }else if(props.tab === 1){\r\n        return (<div>1번째 입니다.</div>);\r\n    }else if(props.tab === 2){\r\n        return (<div>2번째 입니다.</div>);\r\n    }\r\n}\r\nexport default TabContent;","import React, { useContext } from 'react';\r\nimport { stockContext } from '../../App';\r\n\r\nfunction InfoStock(props){\r\n    let stock = useContext(stockContext);\r\n\r\n    let stockCount = stock[props.findProduct.id];\r\n\r\n    return (<div className='stock'> 재고 : {stockCount} 개</div>)\r\n}\r\nexport default InfoStock;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Nav } from 'react-bootstrap';\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport Alert from '../Common/Alert';\r\nimport './Detail.scss';\r\n\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport TabContent from './Tab/TabContent';\r\nimport InfoStock from './InfoStock';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Detail(props){\r\n    \r\n    let [ alert, setAlert ] = useState(true);\r\n    let history = useHistory();    \r\n    let { id } = useParams();\r\n\r\n    let [tab, setTab] = useState(0);\r\n    let [switchBtn , setSwitchBtn] = useState(false);\r\n    \r\n    //React Hook의 사용 예\r\n    useEffect(()=>{\r\n\r\n        let alertTimer = setTimeout(()=>{\r\n            setAlert(false);\r\n            \r\n        },2000);\r\n    return ()=>{\r\n        clearTimeout(alertTimer);\r\n    }\r\n    },[alert]);\r\n\r\n    // Component가 Mount 되었을 때 \r\n    // Component가 update 될 때\r\n    // 특정 코드를 실행 할 수 있다.\r\n    let findProduct = props.data.find((prod)=>{\r\n        return prod.id.toString() === id;\r\n    });\r\n\r\n    // Tab-start\r\n    let pushTabBtn = ((e) => \r\n    { \r\n        const link = e.target.dataset.rbEventKey;\r\n        if(link === 'link-0'){\r\n            setSwitchBtn(false);\r\n            setTab(0);\r\n\r\n        }else if(link === 'link-1'){\r\n            setSwitchBtn(false);\r\n            setTab(1);\r\n        }else if(link === 'link-2'){\r\n            setSwitchBtn(false);\r\n            setTab(2);\r\n        }\r\n    });\r\n    // Tab-end\r\n\r\n    let addItem = (()=>{\r\n        props.dispatch({type : 'itemAdd',payload : {id:2, name:findProduct.title ,quan:1}});\r\n        history.push('/Cart');\r\n    });\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div>\r\n                <h1 className=\"red\">{findProduct.title}</h1>\r\n            </div>\r\n\r\n            {\r\n                alert === true \r\n                ? (<Alert information={'재고가 얼마 남지 않았습니다.'}/>) \r\n                : null\r\n            }\r\n            \r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <img src={`https://codingapple1.github.io/shop/shoes${findProduct.id + 1}.jpg`} width=\"100%\" alt=\"shoes\"/>\r\n                </div>\r\n                <div className=\"col-md-6 mt-4\">\r\n                    <h4 className=\"pt-5\">{findProduct.title}</h4>\r\n                    <p>{findProduct.content}</p>\r\n                    <p>{findProduct.price}원</p>\r\n                    <InfoStock stock={props.stock} findProduct = {findProduct}/>\r\n                    <button className=\"btn btn-danger\" onClick={addItem}>주문하기</button>\r\n                    \r\n                    <Button variant=\"warning\" onClick={()=>{\r\n                        history.goBack();\r\n                    }}>뒤로가기</Button> \r\n                </div>\r\n            </div>\r\n\r\n            <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-0\" onClick={pushTabBtn}>상품정보</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-1\" onClick={pushTabBtn}>배송관련</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-2\" onClick={pushTabBtn}>환불약관</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n\r\n            <CSSTransition in={switchBtn} classNames=\"tabAnimation\" timeout={500}>\r\n                <TabContent  tab = { tab } setSwitchBtn={setSwitchBtn}/>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction storeFuc(state){\r\n    return {\r\n        state : state.reducer,\r\n        addItem : state.reducer3\r\n    }\r\n}\r\n\r\nexport default connect(storeFuc)(Detail)\r\n"],"sourceRoot":""}